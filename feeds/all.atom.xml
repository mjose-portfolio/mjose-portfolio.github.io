<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Portfolio's Marc Jose Rubio</title><link href="https://mjose-portfolio.github.io/" rel="alternate"></link><link href="https://mjose-portfolio.github.io/feeds/all.atom.xml" rel="self"></link><id>https://mjose-portfolio.github.io/</id><updated>2020-02-14T08:06:00+01:00</updated><entry><title>Docker Ubuntu Base Image</title><link href="https://mjose-portfolio.github.io/Docker%20Ubuntu%20Base%20Image.html" rel="alternate"></link><published>2020-02-14T08:06:00+01:00</published><updated>2020-02-14T08:06:00+01:00</updated><author><name>Marc Jose</name></author><id>tag:mjose-portfolio.github.io,2020-02-14:/Docker Ubuntu Base Image.html</id><summary type="html">&lt;p&gt;Ubuntu base image for docker containers.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/Docker-ubuntu-base_image/images/Ubuntu_Logo.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu base image for docker container.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Docker" src="https://github.com/mjose-portfolio/docker-ubuntu-base_image/workflows/Docker/badge.svg" /&gt;&lt;img alt="Docker Cloud Build Status" src="https://img.shields.io/docker/cloud/build/mjoseportfolio/ubuntu-bi?logo=Docker" /&gt;&lt;img alt="Docker Cloud Automated build" src="https://img.shields.io/docker/cloud/automated/mjoseportfolio/ubuntu-bi?logo=docker" /&gt;&lt;/p&gt;
&lt;p&gt;The docker-ubuntu-base_image base on ubuntu with runit to be able to run different process inside the container. It is using default tools already include in runit for logs, cron, etc (svlogd, crond, pstree, sv,chpst). it support tags (16.04, 17.04, 18.04 and 19.04)&lt;/p&gt;
&lt;p&gt;This image will be use to builds others image for other projects. It will be build periodical to make sure that any security update is include with the last version from ubuntu repository.&lt;/p&gt;
&lt;h2 id="using-docker-ubuntu-base_image-as-base-image"&gt;Using docker-ubuntu-base_image as base image&lt;a class="headerlink" href="#using-docker-ubuntu-base_image-as-base-image" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="getting-started"&gt;Getting started&lt;a class="headerlink" href="#getting-started" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The image is called &lt;code&gt;mjoseportfolio/ubuntu-bi&lt;/code&gt;, and is available on the Docker registry.&lt;/p&gt;
&lt;pre&gt;&lt;code class="dockerfile"&gt;FROM mjoseportfolio/ubuntu-bi

# Use baseimage-docker's init system.
CMD [&amp;quot;/sbin/my_init&amp;quot;]

# ...put your own build instructions here...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="using-different-ubuntu-release"&gt;Using different ubuntu release&lt;a class="headerlink" href="#using-different-ubuntu-release" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The docker-baseimage is base on ubuntu image , you can define what version of ubuntu you want to used by using tags&lt;/p&gt;
&lt;pre&gt;&lt;code class="dockerfile"&gt;  # for Ubuntu Disco Dingo
  FROM  quantumobject/docker-baseimage:version-19.04
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="dockerfile"&gt;  # for ubuntu Bionic Beaver
  FROM quantumobject/docker-baseimage:version-18.04
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="dockerfile"&gt;  # for ubuntu Zesty Zapus
  FROM quantumobject/docker-baseimage:version-17.04
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="_1"&gt;&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class="dockerfile"&gt;  # for ubuntu Xenial Xerus
  FROM quantumobject/docker-baseimage:version-16.04
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="_2"&gt;&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="adding-additional-daemons"&gt;Adding additional daemons&lt;a class="headerlink" href="#adding-additional-daemons" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can add additional daemons (e.g. your own app) to the image by creating runit entries. You only have to write a small shell script which runs your daemon, and runit will keep it up and running for you, restarting it when it crashes, etc.&lt;/p&gt;
&lt;p&gt;The shell script must be called &lt;code&gt;run&lt;/code&gt;, must be executable, and is to be placed in the directory &lt;code&gt;/etc/service/&amp;lt;NAME&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's an example showing you how a memcached server runit entry can be made.&lt;/p&gt;
&lt;pre&gt;&lt;code class="shell"&gt;#!/bin/sh
### In memcached.sh (make sure this file is chmod +x):
# `chpst -u memcache` runs the given command as the user `memcache`.
# If you omit that part, the command will be run as root.
exec 2&amp;gt;&amp;amp;1 chpst -u memcache /usr/bin/memcached

### In Dockerfile:
RUN mkdir /etc/service/memcached
ADD memcached.sh /etc/service/memcached/run
RUN chmod +x /etc/service/memcached/run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the shell script must run the daemon &lt;strong&gt;without letting it daemonize/fork it&lt;/strong&gt;. Usually, daemons provide a command line flag or a config file option for that.&lt;/p&gt;
&lt;h3 id="running-scripts-during-container-startup"&gt;Running scripts during container startup&lt;a class="headerlink" href="#running-scripts-during-container-startup" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The docker-baseimage init system, &lt;code&gt;/sbin/my_init&lt;/code&gt;, runs the following scripts during startup, in the following order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All executable scripts in &lt;code&gt;/etc/my_init.d&lt;/code&gt;, if this directory exists. The scripts are run in lexicographic order.&lt;/li&gt;
&lt;li&gt;The script &lt;code&gt;/etc/rc.local&lt;/code&gt;, if this file exists.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All scripts must exit correctly, e.g. with exit code 0. If any script exits with a non-zero exit code, the booting will fail.&lt;/p&gt;
&lt;p&gt;The following example shows how you can add a startup script. This script simply logs the time of boot to the file /tmp/boottime.txt.&lt;/p&gt;
&lt;pre&gt;&lt;code class="shell"&gt;#!/bin/sh
### In logtime.sh (make sure this file is chmod +x):
date &amp;gt; /tmp/boottime.txt

### In Dockerfile:
RUN mkdir -p /etc/my_init.d
ADD logtime.sh /etc/my_init.d/logtime.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="environment-variables"&gt;Environment variables&lt;a class="headerlink" href="#environment-variables" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you use &lt;code&gt;/sbin/my_init&lt;/code&gt; as the main container command, then any environment variables set with &lt;code&gt;docker run --env&lt;/code&gt; or with the &lt;code&gt;ENV&lt;/code&gt; command in the Dockerfile, will be picked up by &lt;code&gt;my_init&lt;/code&gt;. These variables will also be passed to all child processes, including &lt;code&gt;/etc/my_init.d&lt;/code&gt; startup scripts, Runit and Runit-managed services. There are however a few caveats you should be aware of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Environment variables on Unix are inherited on a per-process basis. This means that it is generally not possible for a child process to change the environment variables of other processes.&lt;/li&gt;
&lt;li&gt;Because of the aforementioned point, there is no good central place for defining environment variables for all applications and services. Debian has the &lt;code&gt;/etc/environment&lt;/code&gt; file but it only works in some situations.&lt;/li&gt;
&lt;li&gt;Some services change environment variables for child processes. Nginx is one such example: it removes all environment variables unless you explicitly instruct it to retain them through the &lt;code&gt;env&lt;/code&gt; configuration option. If you host any applications on Nginx &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;my_init&lt;/code&gt; provides a solution for all these caveats.&lt;/p&gt;
&lt;h4 id="centrally-defining-your-own-environment-variables"&gt;Centrally defining your own environment variables&lt;a class="headerlink" href="#centrally-defining-your-own-environment-variables" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;During startup, before running any startup scripts, &lt;code&gt;my_init&lt;/code&gt; imports environment variables from the directory &lt;code&gt;/etc/container_environment&lt;/code&gt;. This directory contains files who are named after the environment variable names. The file contents contain the environment variable values. This directory is therefore a good place to centrally define your own environment variables, which will be inherited by all startup scripts and Runit services.&lt;/p&gt;
&lt;p&gt;For example, here's how you can define an environment variable from your Dockerfile:&lt;/p&gt;
&lt;pre&gt;&lt;code class="dockerfile"&gt;RUN echo Apachai Hopachai &amp;gt; /etc/container_environment/MY_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can verify that it works, as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;$ docker run -t -i &amp;lt;YOUR_NAME_IMAGE&amp;gt; /sbin/my_init -- bash -l
...
*** Running bash -l...
# echo $MY_NAME
Apachai Hopachai
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you've looked carefully, you'll notice that the 'echo' command actually prints a newline. Why does $MY_NAME not contain a newline then? It's because &lt;code&gt;my_init&lt;/code&gt; strips the trailing newline, if any. If you intended on the value having a newline, you should add &lt;em&gt;another&lt;/em&gt; newline, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="dockerfile"&gt;RUN echo -e &amp;quot;Apachai Hopachai\n&amp;quot; &amp;gt; /etc/container_environment/MY_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="environment-variable-dumps"&gt;Environment variable dumps&lt;a class="headerlink" href="#environment-variable-dumps" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While the previously mentioned mechanism is good for centrally defining environment variables, it by itself does not prevent services (e.g. Nginx) from changing and resetting environment variables from child processes. However, the &lt;code&gt;my_init&lt;/code&gt; mechanism does make it easy for you to query what the original environment variables are.&lt;/p&gt;
&lt;p&gt;During startup, right after importing environment variables from &lt;code&gt;/etc/container_environment&lt;/code&gt;, &lt;code&gt;my_init&lt;/code&gt; will dump all its environment variables (that is, all variables imported from &lt;code&gt;container_environment&lt;/code&gt;, as well as all variables it picked up from &lt;code&gt;docker run --env&lt;/code&gt;) to the following locations, in the following formats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/container_environment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/container_environment.sh&lt;/code&gt; - a dump of the environment variables in Bash format. You can source the file directly from a Bash shell script.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/container_environment.json&lt;/code&gt; - a dump of the environment variables in JSON format.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The multiple formats makes it easy for you to query the original environment variables no matter which language your scripts/apps are written in.&lt;/p&gt;
&lt;p&gt;Here is an example shell session showing you how the dumps look like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/Docker-ubuntu-base_image/images/dumps.gif" /&gt;&lt;/p&gt;
&lt;h4 id="modifying-environment-variables"&gt;Modifying environment variables&lt;a class="headerlink" href="#modifying-environment-variables" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It is even possible to modify the environment variables in &lt;code&gt;my_init&lt;/code&gt; (and therefore the environment variables in all child processes that are spawned after that point in time), by altering the files in &lt;code&gt;/etc/container_environment&lt;/code&gt;. After each time &lt;code&gt;my_init&lt;/code&gt; runs a startup script, it resets its own environment variables to the state in &lt;code&gt;/etc/container_environment&lt;/code&gt;, and re-dumps the new environment variables to &lt;code&gt;container_environment.sh&lt;/code&gt; and &lt;code&gt;container_environment.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But note that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modifying &lt;code&gt;container_environment.sh&lt;/code&gt; and &lt;code&gt;container_environment.json&lt;/code&gt; has no effect.&lt;/li&gt;
&lt;li&gt;Runit services cannot modify the environment like that. &lt;code&gt;my_init&lt;/code&gt; only activates changes in &lt;code&gt;/etc/container_environment&lt;/code&gt; when running startup scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="security"&gt;Security&lt;a class="headerlink" href="#security" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Because environment variables can potentially contain sensitive information, &lt;code&gt;/etc/container_environment&lt;/code&gt; and its Bash and JSON dumps are by default owned by root, and accessible only by the &lt;code&gt;docker_env&lt;/code&gt; group (so that any user added this group will have these variables automatically loaded).&lt;/p&gt;
&lt;p&gt;If you are sure that your environment variables don't contain sensitive data, then you can also relax the permissions on that directory and those files by making them world-readable:&lt;/p&gt;
&lt;pre&gt;&lt;code class="dockerfile"&gt;RUN chmod 755 /etc/container_environment
RUN chmod 644 /etc/container_environment.sh /etc/container_environment.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="container-administration"&gt;Container administration&lt;a class="headerlink" href="#container-administration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the ideas behind Docker is that containers should be stateless, easily restartable, and behave like a black box. However, you may occasionally encounter situations where you want to login to a container, or to run a command inside a container, for development, inspection and debugging purposes. This section describes how you can administer the container for those purposes.&lt;/p&gt;
&lt;h3 id="running-a-one-shot-command-in-a-new-container"&gt;Running a one-shot command in a new container&lt;a class="headerlink" href="#running-a-one-shot-command-in-a-new-container" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Normally, when you want to create a new container in order to run a single command inside it, and immediately exit after the command exits, you invoke Docker like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="bash"&gt;docker run YOUR_IMAGE COMMAND ARGUMENTS...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However the downside of this approach is that the init system is not started. That is, while invoking &lt;code&gt;COMMAND&lt;/code&gt;, important daemons such as cron and syslog are not running. Also, orphaned child processes are not properly reaped, because &lt;code&gt;COMMAND&lt;/code&gt; is PID 1.&lt;/p&gt;
&lt;p&gt;Baseimage-docker provides a facility to run a single one-shot command, while solving all of the aforementioned problems. Run a single command in the following manner:&lt;/p&gt;
&lt;pre&gt;&lt;code class="shell"&gt;docker run YOUR_IMAGE /sbin/my_init -- COMMAND ARGUMENTS ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will perform the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Runs all system startup files, such as /etc/my_init.d/* and /etc/rc.local.&lt;/li&gt;
&lt;li&gt;Starts all runit services.&lt;/li&gt;
&lt;li&gt;Runs the specified command.&lt;/li&gt;
&lt;li&gt;When the specified command exits, stops all runit services.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/Docker-ubuntu-base_image/images/standard_ls_example.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Perhaps you don't want to run the startup files. You can customize all this by passing arguments to &lt;code&gt;my_init&lt;/code&gt;. Invoke &lt;code&gt;docker run YOUR_IMAGE /sbin/my_init --help&lt;/code&gt; for more information.&lt;/p&gt;
&lt;p&gt;The following example runs &lt;code&gt;ls&lt;/code&gt; without running the startup files, while running all runit services:&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/Docker-ubuntu-base_image/images/skip_ls_example.gif" /&gt;&lt;/p&gt;
&lt;h3 id="running-a-command-in-an-existing-running-container"&gt;Running a command in an existing, running container&lt;a class="headerlink" href="#running-a-command-in-an-existing-running-container" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Running bash shell , or running a command inside it, via 'docker exec' &lt;/p&gt;
&lt;p&gt;To run the container's bash shell :&lt;/p&gt;
&lt;pre&gt;&lt;code class="shell"&gt;docker exec -it YOUR-CONTAINER-ID /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can lookup &lt;code&gt;YOUR-CONTAINER-ID&lt;/code&gt; by running &lt;code&gt;docker ps&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also tell it to run a command, and then exit:&lt;/p&gt;
&lt;pre&gt;&lt;code class="shell"&gt;docker exec -it YOUR-CONTAINER-ID echo hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This image has been adapted from the source code from &lt;a href="https://www.quantumobject.org"&gt;www.quantumobject.org&lt;/a&gt;&lt;/p&gt;</content><category term="Docker"></category><category term="docker"></category><category term="linux"></category><category term="unix"></category><category term="ubuntu"></category><category term="base image"></category></entry><entry><title>TaskMaster</title><link href="https://mjose-portfolio.github.io/TaskMaster.html" rel="alternate"></link><published>2019-12-01T16:15:00+01:00</published><updated>2019-12-01T16:15:00+01:00</updated><author><name>Abraham Gimbao</name></author><id>tag:mjose-portfolio.github.io,2019-12-01:/TaskMaster.html</id><summary type="html">&lt;p&gt;Basic task manager that reads from a config.json file and supervises a number of processes.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Basic task manager that reads from a config.json file and supervises a number of processes.
We were restricted to our language of choice’s standard library. Except for the config file parsing.&lt;/p&gt;
&lt;p&gt;The script reads the tasks parameters from the json file, and executes some kind of user prompt to effectively manage these tasks.&lt;/p&gt;
&lt;p&gt;The only argument needed is a config file. All info about making your own config file is in exampleconfig.json.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mjose-portfolio/42-TaskMaster"&gt;Try it on Github!&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="project-partners"&gt;Project partners&lt;a class="headerlink" href="#project-partners" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/abguimba"&gt;Abraham Gimbao&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mjose-portfolio"&gt;Marc Jose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install"&gt;Install&lt;a class="headerlink" href="#install" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Not needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;a class="headerlink" href="#configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a file in json format with the following characteristics:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;programs&amp;quot;: {                   #a list of programs
        &amp;quot;sleep&amp;quot;: {                  #the name of a program *Required*
            &amp;quot;cmd&amp;quot;: &amp;quot;sleep 1000&amp;quot;,    #the exact command to launch *Required*
            &amp;quot;cmdammount&amp;quot;: 10,       #the number of times you need to launch this process *Required*
            &amp;quot;autostart&amp;quot;: true,      #cmd started at launch True/False? *Required*
            &amp;quot;autorestart&amp;quot;: &amp;quot;never&amp;quot;, #restart this program on &amp;quot;never&amp;quot;, &amp;quot;always&amp;quot;, or on &amp;quot;unexpected&amp;quot; termination *Required*
            &amp;quot;starttime&amp;quot;: 5,         #amount of time to go by before the program is considered &amp;quot;succesfully started&amp;quot; *Required*
            &amp;quot;stoptime&amp;quot;: 10,         #amount of time to go by after sending quitsit to program before killing it completely with SIGKILL *Required*
            &amp;quot;restartretries&amp;quot;: 3,    #amount of times a program will be tried to be restarted or started at the beginning before giving up on it *Required*
            &amp;quot;quitsig&amp;quot;: &amp;quot;TERM&amp;quot;,      #signal that will be sent to the command to be gracefully exited (QUIT, TERM, INT, KILL) *Required*
            &amp;quot;exitcodes&amp;quot;: &amp;quot;None&amp;quot;,    #exitcodes that define an expected termination for use autorestart or None for all exitcodes being considered unexpected
            &amp;quot;workingdir&amp;quot;: &amp;quot;/tmp/&amp;quot;,  #working directory to be set for the command or None for same working dir as parent(taskmaster)
            &amp;quot;umask&amp;quot;: 0,             #umask to be set for the program or None (in decimal (integer)!)
            &amp;quot;stdout&amp;quot;: &amp;quot;None&amp;quot;,       #option to redirect stdout to file or to simple discard it with &amp;quot;discard&amp;quot; or None
            &amp;quot;stderr&amp;quot;: &amp;quot;None&amp;quot;,       #option to redirect stderr to file or to simple discard it with &amp;quot;discard&amp;quot; or None
            &amp;quot;env&amp;quot;: &amp;quot;None&amp;quot;           #extra env parameters to provide to the new process, &amp;quot;None&amp;quot; for no environment at all, or &amp;quot;default&amp;quot; for the same env as taskmaster
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="launching-method"&gt;Launching method&lt;a class="headerlink" href="#launching-method" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python3 taskmaster.py config_files/&amp;lt;yourconfig&amp;gt;.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="commands"&gt;Commands&lt;a class="headerlink" href="#commands" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;help&lt;/code&gt;: List available commands with "help" or detailed help with "help cmd".&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help &amp;lt;command&amp;gt;&lt;/code&gt;: Prints the description and the method of use of the command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start &amp;lt;program&amp;gt;&lt;/code&gt;: Starts desired program(s). Usage -&amp;gt; start &lt;program name(s)&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stop &amp;lt;program&amp;gt;&lt;/code&gt;: Stops desired program(s). Usage -&amp;gt; stop &lt;program name(s)&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;restart &amp;lt;program&amp;gt;&lt;/code&gt;: Restarts desired program(s) that has already been launched. Usage -&amp;gt; restart &lt;program name(s)&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reload&lt;/code&gt;: Reloads the whole configuration. Usage -&amp;gt; reload&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display&lt;/code&gt;: Opens a window that shows the pre-loaded configuration and the status of the programs to be monitored.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="examples"&gt;Examples&lt;a class="headerlink" href="#examples" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/42-TaskMaster/images/start_taskmaster.gif" /&gt;
&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/42-TaskMaster/images/start_ls.gif" /&gt;
&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/42-TaskMaster/images/display_command.gif" /&gt;
&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/42-TaskMaster/images/display.gif" /&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category><category term="42born2code"></category><category term="unix"></category></entry><entry><title>42sh</title><link href="https://mjose-portfolio.github.io/42sh.html" rel="alternate"></link><published>2019-05-05T02:00:00+02:00</published><updated>2019-05-05T02:00:00+02:00</updated><author><name>Abraham Gimbao</name></author><id>tag:mjose-portfolio.github.io,2019-05-05:/42sh.html</id><summary type="html">&lt;p&gt;This project consists of creating a complete shell and uses the work done on &lt;a href="https://mjose-portfolio.github.io/21sh.html"&gt;21sh&lt;/a&gt; and &lt;a href="https://mjose-portfolio.github.io/Minishell.html"&gt;minishell&lt;/a&gt; projects.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This project consists of creating a complete shell and uses the work done on &lt;a href="https://mjose-portfolio.github.io/21sh.html"&gt;21sh&lt;/a&gt; and &lt;a href="https://mjose-portfolio.github.io/Minishell.html"&gt;minishell&lt;/a&gt; projects. We build our own shell, including a job control and shell script. This project involves a large variety of standard UNIX (and POSIX) functionalities.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mjose-portfolio/42-42sh"&gt;Try it on Github!&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="1-project-partners"&gt;1. Project Partners&lt;a class="headerlink" href="#1-project-partners" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/abguimba"&gt;Abraham Gimbao&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alsomvil42"&gt;Alexandre Somville&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BrendanSiche"&gt;Brendan Siche&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mjose-portfolio"&gt;Marc Jose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-install"&gt;2. Install&lt;a class="headerlink" href="#2-install" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/42-42sh/images/make.gif" /&gt;&lt;/p&gt;
&lt;h3 id="21-make-options"&gt;2.1. Make Options&lt;a class="headerlink" href="#21-make-options" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;: Compiles the files and creates the executable 42sh&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: Remove binary files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make fclean&lt;/code&gt;: Deletes the binary files and the 42sh executable file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make re&lt;/code&gt;: Deletes the binary files and the 42sh executable file and recompiles them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-features"&gt;3. Features&lt;a class="headerlink" href="#3-features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id="31-builtins"&gt;3.1 Builtins&lt;a class="headerlink" href="#31-builtins" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#311-alias"&gt;3.1.1 alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#312-bg"&gt;3.1.2 bg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#313-cd"&gt;3.1.3 cd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#314-echo"&gt;3.1.4 echo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#315-env"&gt;3.1.5 env&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#316-exit--n-"&gt;3.1.6 exit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#317-export"&gt;3.1.7 export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#318-false"&gt;3.1.8 false&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#319-fg"&gt;3.1.9 fg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3110-hash"&gt;3.1.10 hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3111-history"&gt;3.1.11 history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3112-jobs"&gt;3.1.12 jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3113-set"&gt;3.1.13 set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3114-test"&gt;3.1.14 test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3115-true"&gt;3.1.15 true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3116-type"&gt;3.1.16 type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3117-unalias"&gt;3.1.17 unalias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3118-unset"&gt;3.1.18 unset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3119-fc"&gt;3.1.19 fc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="32-prompt"&gt;3.2 Prompt&lt;a class="headerlink" href="#32-prompt" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The prompt is displayed as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;["user"]&amp;lt;"current directory"&amp;gt;42sh $/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The current directory is updated live, each time you change directory, of course, the information is collected from the environment variable &lt;code&gt;PWD&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="33-execution-of-commands"&gt;3.3 Execution of Commands&lt;a class="headerlink" href="#33-execution-of-commands" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The command shall be searched for using the PATH environment variable.&lt;/p&gt;
&lt;p&gt;It is possible to specify the paths where the command to execute resides (in case you want to execute a command that does not reside in any directory of the PATH variable, or the variable is not defined).&lt;/p&gt;
&lt;p&gt;The parameters of each command are taken into account.&lt;/p&gt;
&lt;h3 id="34-redirections"&gt;3.4 Redirections&lt;a class="headerlink" href="#34-redirections" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shredirections.html#341-redirecting-input"&gt;3.4.1 Redirecting Input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shredirections.html#342-redirecting-output"&gt;3.4.2 Redirecting Output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shredirections.html#343-here-document"&gt;3.4.3 Here-Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shredirections.html#344-duplicating-an-input-file-descriptor"&gt;3.4.4 Duplicating an Input File Descriptor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shredirections.html#345-duplicating-an-output-file-descriptor"&gt;3.4.5 Duplicating an Output File Descriptor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="35-pipelines"&gt;3.5 Pipelines&lt;a class="headerlink" href="#35-pipelines" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The format for a pipeline is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;command1 [ | command2 ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The standard output of &lt;code&gt;command1&lt;/code&gt; shall be connected to the standard input of &lt;code&gt;command2&lt;/code&gt;. The standard input, standard output, or both of a command shall be considered to be assigned by the pipeline before any redirection specified by redirection operators that are part of the command.&lt;/p&gt;
&lt;h3 id="36-operand"&gt;3.6 &lt;code&gt;;&lt;/code&gt; Operand&lt;a class="headerlink" href="#36-operand" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;it is possible to separate commands using the operand &lt;code&gt;;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;command1 ; command2 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="37-management-of-internal-variables"&gt;3.7 Management Of Internal Variables&lt;a class="headerlink" href="#37-management-of-internal-variables" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Creation of internal variables according to the syntax:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;name=value
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Export of internal variables to the environment, via built-in &lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#317-export"&gt;export&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;List the internal variables of the shell via the built-in &lt;a href="({filename}/pages/42-42sh/builtins.md#3113-set)"&gt;set&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Removal of internal and environmental variables, via the built-in &lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3118-unset"&gt;unset&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Creation of environment variables for a single command, example :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;HOME=/tmp cd
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Simple expansion of parameters according to the syntax:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;${name}
$name
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Management of special parameters:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$: PID of the current process.
?: Last command exit code.
0: Shell name.
!: PID of the last process launched in backround.
_: Last parameter used in a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="38-job-control-management"&gt;3.8 Job Control Management&lt;a class="headerlink" href="#38-job-control-management" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The builtins that allow to interact with the Job Control are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#312-bg"&gt;bg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#319-fg"&gt;fg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3112-jobs"&gt;jobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="39-inhibitors"&gt;3.9 Inhibitors&lt;a class="headerlink" href="#39-inhibitors" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Single-quotes: &lt;code&gt;'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enclosing characters in single-quotes ( &lt;code&gt;''&lt;/code&gt; ) shall preserve the literal value of each character within the single-quotes. A single-quote cannot occur within single-quotes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Double-quotes:&lt;code&gt;"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enclosing characters in double-quotes ( &lt;code&gt;""&lt;/code&gt; ) shall preserve the literal value of all characters within the double-quotes, with the exception of the characters backquote, &lt;dollar-sign&gt;, and &lt;backslash&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escape Character (Backslash): &lt;code&gt;\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A &lt;backslash&gt; that is not quoted shall preserve the literal value of the following character, with the exception of a &lt;newline&gt;. If a &lt;newline&gt; follows the &lt;backslash&gt;, the shell shall interpret this as line continuation. The &lt;backslash&gt; and &lt;newline&gt; shall be removed before splitting the input into tokens. Since the escaped &lt;newline&gt; is removed entirely from the input and is not replaced by any white space, it cannot serve as a token separator.&lt;/p&gt;
&lt;h3 id="310-parameter-expansions"&gt;3.10 Parameter Expansions&lt;a class="headerlink" href="#310-parameter-expansions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;${parameter:-[word]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Use Default Values&lt;/strong&gt;. If &lt;em&gt;parameter&lt;/em&gt; is unset or null, the expansion of &lt;em&gt;word&lt;/em&gt; (or an empty string if &lt;em&gt;word&lt;/em&gt; is omitted) shall be substituted; otherwise, the value of &lt;em&gt;parameter&lt;/em&gt; shall be substituted.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${parameter:=[word]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Assign Default Values&lt;/strong&gt;. If &lt;em&gt;parameter&lt;/em&gt; is unset or null, the expansion of &lt;em&gt;word&lt;/em&gt; (or an empty string if &lt;em&gt;word&lt;/em&gt; is omitted) shall be assigned to &lt;em&gt;parameter&lt;/em&gt;. In all cases, the final value of &lt;em&gt;parameter&lt;/em&gt; shall be substituted. Only variables, not positional parameters or special parameters, can be assigned in this way.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${parameter:?[word]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Indicate Error if Null or Unset&lt;/strong&gt;. If &lt;em&gt;parameter&lt;/em&gt; is unset or null, the expansion of &lt;em&gt;word&lt;/em&gt; (or a message indicating it is unset if &lt;em&gt;word&lt;/em&gt; is omitted) shall be written to standard error and the shell exits with a non-zero exit status. Otherwise, the value of &lt;em&gt;parameter&lt;/em&gt; shall be substituted. An interactive shell need not exit.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${parameter:+[word]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Use Alternative Value&lt;/strong&gt;. If &lt;em&gt;parameter&lt;/em&gt; is unset or null, null shall be substituted; otherwise, the expansion of &lt;em&gt;word&lt;/em&gt; (or an empty string if &lt;em&gt;word&lt;/em&gt; is omitted) shall be substituted.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${#parameter}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;String Length&lt;/strong&gt;. The length in characters of the value of &lt;em&gt;parameter&lt;/em&gt; shall be substituted. If &lt;em&gt;parameter&lt;/em&gt; is &lt;code&gt;'*'&lt;/code&gt; or &lt;code&gt;'@'&lt;/code&gt;, the result of the expansion is unspecified. If &lt;em&gt;parameter&lt;/em&gt; is unset and &lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799//utilities/V3_chap02.html#set"&gt;&lt;em&gt;set&lt;/em&gt;&lt;/a&gt; &lt;strong&gt;-u&lt;/strong&gt; is in effect, the expansion shall fail.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${parameter%[word]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Remove Smallest Suffix Pattern&lt;/strong&gt;. The &lt;em&gt;word&lt;/em&gt; shall be expanded to produce a pattern. The parameter expansion shall then result in &lt;em&gt;parameter&lt;/em&gt;, with the smallest portion of the suffix matched by the &lt;em&gt;pattern&lt;/em&gt; deleted. If present, &lt;em&gt;word&lt;/em&gt; shall not begin with an unquoted &lt;code&gt;'%'&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${parameter%%[word]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Remove Largest Suffix Pattern&lt;/strong&gt;. The &lt;em&gt;word&lt;/em&gt; shall be expanded to produce a pattern. The parameter expansion shall then result in &lt;em&gt;parameter&lt;/em&gt;, with the largest portion of the suffix matched by the &lt;em&gt;pattern&lt;/em&gt; deleted.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${parameter#[word]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Remove Smallest Prefix Pattern&lt;/strong&gt;. The &lt;em&gt;word&lt;/em&gt; shall be expanded to produce a pattern. The parameter expansion shall then result in &lt;em&gt;parameter&lt;/em&gt;, with the smallest portion of the prefix matched by the &lt;em&gt;pattern&lt;/em&gt; deleted. If present, &lt;em&gt;word&lt;/em&gt; shall not begin with an unquoted &lt;code&gt;'#'&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${parameter##[word]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Remove Largest Prefix Pattern&lt;/strong&gt;. The &lt;em&gt;word&lt;/em&gt; shall be expanded to produce a pattern. The parameter expansion shall then result in &lt;em&gt;parameter&lt;/em&gt;, with the largest portion of the prefix matched by the &lt;em&gt;pattern&lt;/em&gt; deleted.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;HOME path of the current user.&lt;/strong&gt; Is replaced by the HOME path of the current user&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~[user name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;HOME path of the user name.&lt;/strong&gt;  The tilde-prefix is replaced with the home directory associated with the specified user name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PWD value&lt;/strong&gt;. the value of the [shell variable] &lt;code&gt;PWD&lt;/code&gt; replaces the tilde-prefix.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OLDPWD value&lt;/strong&gt;. the value of the [shell variable] &lt;code&gt;OLDPWD&lt;/code&gt; replaces the tilde-prefix.&lt;/p&gt;
&lt;h3 id="311-history-management"&gt;3.11 History Management&lt;a class="headerlink" href="#311-history-management" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Executed commands are automatically saved in the &lt;code&gt;$HOME/.42hist&lt;/code&gt; file, so that they can be used from other sessions.&lt;/p&gt;
&lt;p&gt;Incremental search in the history with the key combination &lt;code&gt;CTRL-R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The builtin that allow to interact with the Job Control is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/42shbuiltins.html#3119-fc"&gt;fc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is also possible to navigate through the history with the &lt;code&gt;up and down arrow keys&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="3111-history-expansions"&gt;3.11.1 History Expansions&lt;a class="headerlink" href="#3111-history-expansions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start a history substitution, except when followed by a space, tab, the end of the line, &lt;code&gt;=&lt;/code&gt; or &lt;code&gt;(&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to the previous command. This is a synonym for &lt;code&gt;!-1&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![word]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to the most recent command preceding the current position in the history list starting with &lt;code&gt;word&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![number]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to command line &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!-[number]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to the command &lt;code&gt;n&lt;/code&gt; lines back.&lt;/p&gt;
&lt;h3 id="312-contextual-dynamic-completion"&gt;3.12 Contextual Dynamic Completion&lt;a class="headerlink" href="#312-contextual-dynamic-completion" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is possible to autocomplete variables, file commands, by pressing the 'TAB key', whether or not the command has been typed.&lt;/p&gt;
&lt;h3 id="313-command-line"&gt;3.13 Command line&lt;a class="headerlink" href="#313-command-line" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The command line features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edit the line where the cursor is located.&lt;/li&gt;
&lt;li&gt;Move the cursor left and right to be able to edit the line at a specific location.&lt;/li&gt;
&lt;li&gt;Use up and down arrows to navigate through the command history able to edit if we feel like it.&lt;/li&gt;
&lt;li&gt;Cut, copy, and/or paste all or part of a line whit cmd+f1 cmd+f2 cmd+f3&lt;/li&gt;
&lt;li&gt;Move directly by word towards the left or the right using shift+LEFT and shift+RIGHT.&lt;/li&gt;
&lt;li&gt;Go directly to the beginning or the end of a line by pressing fn+left and fn+right.&lt;/li&gt;
&lt;li&gt;Write AND edit a command over a few lines.&lt;/li&gt;
&lt;/ul&gt;</content><category term="C"></category><category term="C"></category><category term="bash"></category><category term="zsh"></category><category term="shell"></category><category term="42born2code"></category><category term="unix"></category><category term="unix-shell"></category></entry><entry><title>21sh</title><link href="https://mjose-portfolio.github.io/21sh.html" rel="alternate"></link><published>2019-04-16T05:30:00+02:00</published><updated>2019-04-16T05:30:00+02:00</updated><author><name>Brendan Siche</name></author><id>tag:mjose-portfolio.github.io,2019-04-16:/21sh.html</id><summary type="html">&lt;p&gt;This project consists of creating a complete shell and uses the work done on &lt;a href="https://mjose-portfolio.github.io/Minishell.html"&gt;minishell&lt;/a&gt; project. We build our own shell. This project involves a large variety of standard UNIX (and POSIX) functionalities.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This project consists of creating a complete shell and uses the work done on &lt;a href="https://github.com/mjose-portfolio/42-Minishell#minishell"&gt;minishell&lt;/a&gt; project. We build our own shell. This project involves a large variety of standard UNIX (and POSIX) functionalities.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mjose-portfolio/42-21sh"&gt;Try it on Github!&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="1-project-partners"&gt;1. Project Partners&lt;a class="headerlink" href="#1-project-partners" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/BrendanSiche"&gt;Brendan Siche&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mjose-portfolio"&gt;Marc Jose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-install"&gt;2. Install&lt;a class="headerlink" href="#2-install" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/42-21sh/images/make.gif" /&gt;&lt;/p&gt;
&lt;h3 id="21-make-options"&gt;2.1. Make Options&lt;a class="headerlink" href="#21-make-options" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;: Compiles the files and creates the executable &lt;code&gt;21sh&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: Remove binary files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make fclean&lt;/code&gt;: Deletes the binary files and the &lt;code&gt;21sh&lt;/code&gt; executable file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make re&lt;/code&gt;: Deletes the binary files and the &lt;code&gt;21sh&lt;/code&gt; executable file and recompiles them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-features"&gt;3. Features&lt;a class="headerlink" href="#3-features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id="31-builtins"&gt;3.1 Builtins&lt;a class="headerlink" href="#31-builtins" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/21shbuiltins.html#311-cd"&gt;3.1.1 cd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/21shbuiltins.html#312-echo"&gt;3.1.2 echo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/21shbuiltins.html#313-env"&gt;3.1.3 env&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/21shbuiltins.html#314-exit--n-"&gt;3.1.4 exit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/21shbuiltins.html#315-setenv"&gt;3.1.5 setenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/21shbuiltins.html#316-unsetenv"&gt;3.1.6 unsetenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="32-prompt"&gt;3.2 Prompt&lt;a class="headerlink" href="#32-prompt" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The prompt is displayed as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;["user"]&amp;lt;"current directory"&amp;gt;21sh $/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The current directory is updated live, each time you change directory, of course, the information is collected from the environment variable &lt;code&gt;PWD&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="33-execution-of-commands"&gt;3.3 Execution of Commands&lt;a class="headerlink" href="#33-execution-of-commands" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The command shall be searched for using the PATH environment variable.&lt;/p&gt;
&lt;p&gt;It is possible to specify the paths where the command to execute resides (in case you want to execute a command that does not reside in any directory of the PATH variable, or the variable is not defined).&lt;/p&gt;
&lt;p&gt;The parameters of each command are taken into account.&lt;/p&gt;
&lt;h3 id="34-redirections"&gt;3.4 Redirections&lt;a class="headerlink" href="#34-redirections" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/21shredirections.html#341-redirecting-input"&gt;3.4.1 Redirecting Input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/21shredirections.html#342-redirecting-output"&gt;3.4.2 Redirecting Output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/21shredirections.html#343-here-document"&gt;3.4.3 Here-Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/21shredirections.html#344-duplicating-an-input-file-descriptor"&gt;3.4.4 Duplicating an Input File Descriptor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/21shredirections.html#345-duplicating-an-output-file-descriptor"&gt;3.4.5 Duplicating an Output File Descriptor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="35-pipelines"&gt;3.5 Pipelines&lt;a class="headerlink" href="#35-pipelines" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The format for a pipeline is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;command1 [ | command2 ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The standard output of &lt;code&gt;command1&lt;/code&gt; shall be connected to the standard input of &lt;code&gt;command2&lt;/code&gt;. The standard input, standard output, or both of a command shall be considered to be assigned by the pipeline before any redirection specified by redirection operators that are part of the command.&lt;/p&gt;
&lt;h3 id="36-operand"&gt;3.6 &lt;code&gt;;&lt;/code&gt; Operand&lt;a class="headerlink" href="#36-operand" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;it is possible to separate commands using the operand &lt;code&gt;;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;command1 ; command2 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="37-management-of-internal-variables"&gt;3.7 Management Of Internal Variables&lt;a class="headerlink" href="#37-management-of-internal-variables" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List the internal variables of the shell via the built-in &lt;a href="https://mjose-portfolio.github.io/pages/21shbuiltins.html#313-env"&gt;env&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Removal of internal and environmental variables, via the built-in &lt;a href="https://mjose-portfolio.github.io/pages/21shbuiltins.html#316-unsetenv"&gt;unsetenv&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Creation of environment variables for a single command via the built-in &lt;a href="https://mjose-portfolio.github.io/pages/21shbuiltins.html#316-setenv"&gt;setenv&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="38-inhibitors"&gt;3.8 Inhibitors&lt;a class="headerlink" href="#38-inhibitors" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Single-quotes: &lt;code&gt;'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enclosing characters in single-quotes ( &lt;code&gt;''&lt;/code&gt; ) shall preserve the literal value of each character within the single-quotes. A single-quote cannot occur within single-quotes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Double-quotes:&lt;code&gt;"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enclosing characters in double-quotes ( &lt;code&gt;""&lt;/code&gt; ) shall preserve the literal value of all characters within the double-quotes, with the exception of the characters backquote, &lt;dollar-sign&gt;, and &lt;backslash&gt;.&lt;/p&gt;
&lt;h3 id="39-parameter-expansions"&gt;3.9 Parameter Expansions&lt;a class="headerlink" href="#39-parameter-expansions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;HOME path of the current user.&lt;/strong&gt; Is replaced by the HOME path of the current user&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~[user name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;HOME path of the user name.&lt;/strong&gt;  The tilde-prefix is replaced with the home directory associated with the specified user name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PWD value&lt;/strong&gt;. the value of the [shell variable] &lt;code&gt;PWD&lt;/code&gt; replaces the tilde-prefix.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OLDPWD value&lt;/strong&gt;. the value of the [shell variable] &lt;code&gt;OLDPWD&lt;/code&gt; replaces the tilde-prefix.&lt;/p&gt;
&lt;h3 id="310-contextual-dynamic-completion"&gt;3.10 Contextual Dynamic Completion&lt;a class="headerlink" href="#310-contextual-dynamic-completion" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is possible to autocomplete variables, file commands, by pressing the 'TAB key', whether or not the command has been typed.&lt;/p&gt;
&lt;h3 id="311-command-line"&gt;3.11 Command line&lt;a class="headerlink" href="#311-command-line" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The command line features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edit the line where the cursor is located.&lt;/li&gt;
&lt;li&gt;Move the cursor left and right to be able to edit the line at a specific location.&lt;/li&gt;
&lt;li&gt;Use up and down arrows to navigate through the command history able to edit if we feel like it.&lt;/li&gt;
&lt;li&gt;Cut, copy, and/or paste all or part of a line whit cmd+f1 cmd+f2 cmd+f3&lt;/li&gt;
&lt;li&gt;Move directly by word towards the left or the right using shift+LEFT and shift+RIGHT.&lt;/li&gt;
&lt;li&gt;Go directly to the beginning or the end of a line by pressing fn+left and fn+right.&lt;/li&gt;
&lt;li&gt;Write AND edit a command over a few lines.&lt;/li&gt;
&lt;/ul&gt;</content><category term="C"></category><category term="C"></category><category term="bash"></category><category term="zsh"></category><category term="shell"></category><category term="42born2code"></category><category term="unix"></category><category term="unix-shell"></category></entry><entry><title>Minishell</title><link href="https://mjose-portfolio.github.io/Minishell.html" rel="alternate"></link><published>2018-11-30T01:30:00+01:00</published><updated>2018-11-30T01:30:00+01:00</updated><author><name>Marc Jose</name></author><id>tag:mjose-portfolio.github.io,2018-11-30:/Minishell.html</id><summary type="html">&lt;p&gt;First step in the creation of a shell. This project consists in a mini-shell capable of reading and evaluating simple user commands. Trivial lexical analysis and parsing of the command. Searching for the corresponding binary on the machine and execute it, or execute the relevant code in the case of a “built-in” command in the shell.&lt;/p&gt;</summary><content type="html">&lt;p&gt;First step in the creation of a shell. This project consists in a mini-shell capable of reading and evaluating simple user commands. Trivial lexical analysis and parsing of the command. Searching for the corresponding binary on the machine and execute it, or execute the relevant code in the case of a “built-in” command in the shell.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mjose-portfolio/42-minishell"&gt;Try it on Github!&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="1-project-partners"&gt;1. Project Partners&lt;a class="headerlink" href="#1-project-partners" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mjose-portfolio"&gt;Marc Jose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-install"&gt;2. Install&lt;a class="headerlink" href="#2-install" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/42-Minishell/images/make.gif" /&gt;&lt;/p&gt;
&lt;h3 id="21-make-options"&gt;2.1. Make Options&lt;a class="headerlink" href="#21-make-options" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;: Compiles the files and creates the executable &lt;code&gt;minishell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: Remove binary files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make fclean&lt;/code&gt;: Deletes the binary files and the &lt;code&gt;minishell&lt;/code&gt; executable file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make re&lt;/code&gt;: Deletes the binary files and the &lt;code&gt;minishell&lt;/code&gt; executable file and recompiles them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-features"&gt;3. Features&lt;a class="headerlink" href="#3-features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id="31-builtins"&gt;3.1 Builtins&lt;a class="headerlink" href="#31-builtins" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/minishellbuiltins.html#311-cd"&gt;3.1.1 cd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/minishellbuiltins.html#312-echo"&gt;3.1.2 echo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/minishellbuiltins.html#313-env"&gt;3.1.3 env&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/minishellbuiltins.html#314-exit--n-"&gt;3.1.4 exit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/minishellbuiltins.html#315-setenv"&gt;3.1.5 setenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mjose-portfolio.github.io/pages/minishellbuiltins.html#316-unsetenv"&gt;3.1.6 unsetenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="32-prompt"&gt;3.2 Prompt&lt;a class="headerlink" href="#32-prompt" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The prompt is displayed as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;["shell name"] :: "current directory" -&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The current directory is updated live, each time you change directory, of course, the information is collected from the environment variable &lt;code&gt;PWD&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="33-execution-of-commands"&gt;3.3 Execution of Commands&lt;a class="headerlink" href="#33-execution-of-commands" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The command shall be searched for using the PATH environment variable.&lt;/p&gt;
&lt;p&gt;It is possible to specify the paths where the command to execute resides (in case you want to execute a command that does not reside in any directory of the PATH variable, or the variable is not defined).&lt;/p&gt;
&lt;p&gt;The parameters of each command are taken into account.&lt;/p&gt;
&lt;h3 id="37-management-of-internal-variables"&gt;3.7 Management Of Internal Variables&lt;a class="headerlink" href="#37-management-of-internal-variables" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List the internal variables of the shell via the built-in &lt;a href="https://mjose-portfolio.github.io/pages/minishellbuiltins.html#313-env"&gt;env&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Removal of internal and environmental variables, via the built-in &lt;a href="https://mjose-portfolio.github.io/pages/minishellbuiltins.html#316-unsetenv"&gt;unsetenv&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Creation of environment variables for a single command via the built-in &lt;a href="https://mjose-portfolio.github.io/pages/minishellbuiltins.html#316-setenv"&gt;setenv&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="39-parameter-expansions"&gt;3.9 Parameter Expansions&lt;a class="headerlink" href="#39-parameter-expansions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;HOME path of the current user.&lt;/strong&gt; Is replaced by the HOME path of the current user.&lt;/p&gt;</content><category term="C"></category><category term="C"></category><category term="bash"></category><category term="zsh"></category><category term="shell"></category><category term="42born2code"></category><category term="unix"></category><category term="unix-shell"></category></entry><entry><title>Ft_ls</title><link href="https://mjose-portfolio.github.io/Ft_ls.html" rel="alternate"></link><published>2018-08-13T12:15:00+02:00</published><updated>2018-08-13T12:15:00+02:00</updated><author><name>Marc Jose</name></author><id>tag:mjose-portfolio.github.io,2018-08-13:/Ft_ls.html</id><summary type="html">&lt;p&gt;First project of the security and systems branch. It's about recoding the &lt;code&gt;ls&lt;/code&gt; command and some of its options.&lt;/p&gt;</summary><content type="html">&lt;p&gt;First project of the security and systems branch. It's about recoding the &lt;code&gt;ls&lt;/code&gt; command and some of its options.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mjose-portfolio/42-ft_ls"&gt;Try it on Github!&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="1-project-partners"&gt;1. Project Partners&lt;a class="headerlink" href="#1-project-partners" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mjose-portfolio"&gt;Marc Jose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-install"&gt;2. Install&lt;a class="headerlink" href="#2-install" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="alt text" src="https://mjose-portfolio.github.io/projects/resources/42-Ft_ls/images/make.gif" /&gt;&lt;/p&gt;
&lt;h3 id="21-make-options"&gt;2.1. Make Options&lt;a class="headerlink" href="#21-make-options" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;: Compiles the files and creates the executable &lt;code&gt;ft_ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make clean&lt;/code&gt;: Remove binary files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make fclean&lt;/code&gt;: Deletes the binary files and the &lt;code&gt;ft_ls&lt;/code&gt; executable file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make re&lt;/code&gt;: Deletes the binary files and the &lt;code&gt;ft_ls&lt;/code&gt; executable file and recompiles them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-options"&gt;3. Options&lt;a class="headerlink" href="#3-options" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-A&lt;/code&gt;: List all entries except for &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;: Include directory entries whose names begin with a dot (&lt;code&gt;.&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-G&lt;/code&gt;: Enable colorized output.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;/code&gt;: Display the group name in the long (&lt;code&gt;-l&lt;/code&gt;) format output (the owner name is suppressed).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;: List in long format. A total sum for all the file sizes is output on a line before the long listing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt;: List in long format, but omit the group id.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-R&lt;/code&gt;: Recursively list subdirectories encountered.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt;: Reverse the order of the sort to get reverse lexicographical order or the oldest entries first.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;: Sort by time modified (most recently modified first) before sorting the operands by lexicographical order.&lt;/li&gt;
&lt;/ul&gt;</content><category term="C"></category><category term="C"></category><category term="shell"></category><category term="42born2code"></category><category term="unix"></category><category term="unix-shell"></category><category term="unix-command"></category></entry></feed>